// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	models "homework-3/internal/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepo is a mock of DatabaseRepo interface.
type MockDatabaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepoMockRecorder
}

// MockDatabaseRepoMockRecorder is the mock recorder for MockDatabaseRepo.
type MockDatabaseRepoMockRecorder struct {
	mock *MockDatabaseRepo
}

// NewMockDatabaseRepo creates a new mock instance.
func NewMockDatabaseRepo(ctrl *gomock.Controller) *MockDatabaseRepo {
	mock := &MockDatabaseRepo{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepo) EXPECT() *MockDatabaseRepoMockRecorder {
	return m.recorder
}

// DeleteReservationByID mocks base method.
func (m *MockDatabaseRepo) DeleteReservationByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservationByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservationByID indicates an expected call of DeleteReservationByID.
func (mr *MockDatabaseRepoMockRecorder) DeleteReservationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservationByID", reflect.TypeOf((*MockDatabaseRepo)(nil).DeleteReservationByID), ctx, id)
}

// DeleteReservationsByRoomID mocks base method.
func (m *MockDatabaseRepo) DeleteReservationsByRoomID(ctx context.Context, roomId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservationsByRoomID", ctx, roomId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservationsByRoomID indicates an expected call of DeleteReservationsByRoomID.
func (mr *MockDatabaseRepoMockRecorder) DeleteReservationsByRoomID(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservationsByRoomID", reflect.TypeOf((*MockDatabaseRepo)(nil).DeleteReservationsByRoomID), ctx, roomId)
}

// DeleteRoomByID mocks base method.
func (m *MockDatabaseRepo) DeleteRoomByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomByID indicates an expected call of DeleteRoomByID.
func (mr *MockDatabaseRepoMockRecorder) DeleteRoomByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomByID", reflect.TypeOf((*MockDatabaseRepo)(nil).DeleteRoomByID), ctx, id)
}

// GetReservationByID mocks base method.
func (m *MockDatabaseRepo) GetReservationByID(ctx context.Context, id int64) (*models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationByID", ctx, id)
	ret0, _ := ret[0].(*models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationByID indicates an expected call of GetReservationByID.
func (mr *MockDatabaseRepoMockRecorder) GetReservationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationByID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetReservationByID), ctx, id)
}

// GetReservationsByRoomID mocks base method.
func (m *MockDatabaseRepo) GetReservationsByRoomID(ctx context.Context, roomID int64) ([]*models.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsByRoomID", ctx, roomID)
	ret0, _ := ret[0].([]*models.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationsByRoomID indicates an expected call of GetReservationsByRoomID.
func (mr *MockDatabaseRepoMockRecorder) GetReservationsByRoomID(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsByRoomID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetReservationsByRoomID), ctx, roomID)
}

// GetRoomByID mocks base method.
func (m *MockDatabaseRepo) GetRoomByID(ctx context.Context, id int64) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", ctx, id)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockDatabaseRepoMockRecorder) GetRoomByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockDatabaseRepo)(nil).GetRoomByID), ctx, id)
}

// GetRoomByName mocks base method.
func (m *MockDatabaseRepo) GetRoomByName(ctx context.Context, name string) (*models.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByName", ctx, name)
	ret0, _ := ret[0].(*models.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByName indicates an expected call of GetRoomByName.
func (mr *MockDatabaseRepoMockRecorder) GetRoomByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByName", reflect.TypeOf((*MockDatabaseRepo)(nil).GetRoomByName), ctx, name)
}

// InsertReservation mocks base method.
func (m *MockDatabaseRepo) InsertReservation(ctx context.Context, reservation *models.Reservation) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReservation", ctx, reservation)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertReservation indicates an expected call of InsertReservation.
func (mr *MockDatabaseRepoMockRecorder) InsertReservation(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReservation", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertReservation), ctx, reservation)
}

// InsertRoom mocks base method.
func (m *MockDatabaseRepo) InsertRoom(ctx context.Context, room *models.Room) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRoom", ctx, room)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRoom indicates an expected call of InsertRoom.
func (mr *MockDatabaseRepoMockRecorder) InsertRoom(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRoom", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertRoom), ctx, room)
}

// UpdateReservation mocks base method.
func (m *MockDatabaseRepo) UpdateReservation(ctx context.Context, res *models.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReservation", ctx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReservation indicates an expected call of UpdateReservation.
func (mr *MockDatabaseRepoMockRecorder) UpdateReservation(ctx, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReservation", reflect.TypeOf((*MockDatabaseRepo)(nil).UpdateReservation), ctx, res)
}

// UpdateRoom mocks base method.
func (m *MockDatabaseRepo) UpdateRoom(ctx context.Context, room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockDatabaseRepoMockRecorder) UpdateRoom(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockDatabaseRepo)(nil).UpdateRoom), ctx, room)
}
